#!/usr/bin/env python
"""
similarity_db_manager.py

Created by Youngsang Shin on 2015-11-03.
Last Modified by Youngsang Shin on 2015-11-03.

Copyright (c) 2015 Korea Internet & Security Agency. All rights reserved.
"""

import sys
import getopt
import pprint
import sqlite3
from os import listdir
from os.path import isfile, join


__author__ = 'Youngsang Shin'

help_message = '''
The help message goes here.
'''

#
# default parameters
#
verbose = False
similarity_DB = {}

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg


def list_up_files(data_dir):
    # from the data_dir, lists up the simimlarity analysis result files.
    filename_list = [ f for f in listdir(data_dir) if isfile(join(data_dir,f)) ]
    return filename_list

#
# [format]
#  hash(md5) \tab hash(md5) \tab similarity_value
#
def parse_result_line(in_line, filename_type):
    # parse the input line
    parsed_record = in_line.split('\t')
    if len(parsed_record) < 3:
        return (None, None, None)

    if filename_type == 1:
        #
        # file name convention 1
        src_filehash = parsed_record[0].strip().split('.')[0]
        dst_filehash = parsed_record[1].strip().split('.')[0]
    elif filename_type == 2:
        #
        # file name convention 2
        src_filehash = parsed_record[0].strip()[:-4]
        dst_filehash = parsed_record[1].strip()[:-4]

    similarity_val = float(parsed_record[2])

    return (src_filehash, dst_filehash, similarity_val)


def build_similarity_DB(in_path, out_db, filename_type):
    # connect to DB
    conn = sqlite3.connect(out_db)
    c = conn.cursor()

    c.execute('CREATE TABLE if not exists similarity (src_filehash text, dst_filehash text, similarity_val real)')
    #c.execute('CREATE INDEX ix01 ON similarity(src_filehash, dst_filehash)')
    #c.execute('CREATE INDEX ix02 ON similarity(src_filehash)')
    c.execute('DELETE FROM similarity')

    # lists up the result files
    filename_list = list_up_files(in_path)

    for filename in filename_list:
        similarity_records = []
        similarity_file = open(in_path + filename, 'r')
        for line in similarity_file:
            line = line.rstrip() # remove Windows Newline character, '/r/n'
            (tmp_src_filehash, dst_filehash, similarity_val) = parse_result_line(line, filename_type)
            if tmp_src_filehash != None:
                src_filehash = tmp_src_filehash
                if src_filehash == dst_filehash:
                    continue
                similarity_records.append((src_filehash, dst_filehash, float(similarity_val)))

        c.executemany('INSERT INTO similarity(src_filehash, dst_filehash, similarity_val) VALUES (?,?,?)', similarity_records)

        similarity_file.close()

    conn.commit()
    # close DB
    conn.close()


def test_similarity_DB(db):
    # connect to DB
    conn = sqlite3.connect(db)
    c = conn.cursor()

    src_filehash = '00a0fd0cdb851c9fb85f1e85dee2cb00'
    dst_filehash = '000032f4161a23d020160f5d919f7a8b'
    c.execute('SELECT * FROM similarity WHERE src_filehash=:src_filehash and dst_filehash=:dst_filehash', \
              {"src_filehash":src_filehash, "dst_filehash":dst_filehash})

    print c.fetchall()

    src_filehash = '00a0fd0cdb851c9fb85f1e85dee2cb00'
    dst_filehash = '003a652a32120df28155a2d7f3bb1cf6'
    c.execute('SELECT * FROM similarity WHERE src_filehash=:src_filehash and dst_filehash=:dst_filehash', \
              {"src_filehash":src_filehash, "dst_filehash":dst_filehash})

    print c.fetchall()

    # close DB
    conn.close()

def get_all_malware_list(db, out_filename):
    # connect to DB
    conn = sqlite3.connect(db)
    c = conn.cursor()
    c.execute('SELECT distinct src_filehash FROM similarity')

    malware_hash_list = c.fetchall()

    hash_list_file = open(out_filename, 'a')
    for malware_hash in malware_hash_list:
        print unicode(malware_hash[0]).encode('ascii')
        hash_list_file.write(unicode(malware_hash[0]).encode('ascii'))
        hash_list_file.write("\n")

    hash_list_file.close()

    # close DB
    conn.close()

def parse_op(op):
    if op == 1:
        return "(building a similarity db)"
    elif op == 2:
        return "(testing a similarity db)"
    elif op == 3:
        return "(obtaining all of malware hashes)"



def main(argv=None):
    #
    # default parameters
    #
    verbose = False
    in_path = "./data/sample1/"
    out_db =  "sample1.db"
    filename_type = 1
    op = 3

    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "hiop:v",
                ["help", "in_path=", "out_db=", "op="])
        except getopt.error, msg:
            raise Usage(msg)

        # option processing
        for option, value in opts:
            if option == "-v":
                verbose = True
            if option in ("-h", "--help"):
                raise Usage(help_message)
            if option in ("-i", "--in_path"):
                in_path = value
            if option in ("-o", "--out_db"):
                out_db = value
            if option in ("-p", "--op"):
                op = value

        #
        # display the parameters for the simulation
        print "************ parameters for similarity_db_manager ************"
        print "verbose =", verbose
        print "in_path =", in_path
        print "out_db =", out_db
        print "operation =", op, parse_op(op)
        print "**************************************************************"

        if op == 1: # building a similarity DB
            print "BEGIN : building a similarity analysis DB"
            build_similarity_DB(in_path, out_db, filename_type)
            print "END : building the similarity analysis DB"
        elif op == 2: # testing the similarity DB (retrieval)
            test_similarity_DB(out_db)
        elif op == 3:
            out_malware_hash_filename = "sample1_malware_hash_list.txt"
            get_all_malware_list(out_db, out_malware_hash_filename)

    except Usage, err:
        print >> sys.stderr, sys.argv[0].split("/")[-1] + ": " + str(err.msg)
        print >> sys.stderr, "\t for help use --help"
        return 2

#
# runs this script
if __name__ == "__main__":
    sys.exit(main())
